diff --git a/lib/client.js b/lib/client.js
index f5f2f73b269ef2d89da36f0d1efaae7cc5ffc97a..1e5dcd89d3a9cb74ba6de03f1794937a6b4f0053 100755
--- a/lib/client.js
+++ b/lib/client.js
@@ -134,7 +134,7 @@ client.prototype.handleMessage = function handleMessage(message) {
 			// Received PING from server..
 			case 'PING':
 				this.emit('ping');
-				if(this._isConnected()) {
+				if(this.isConnected()) {
 					this.ws.send('PONG');
 				}
 				break;
@@ -183,7 +183,7 @@ client.prototype.handleMessage = function handleMessage(message) {
 				// Set an internal ping timeout check interval..
 				this.pingLoop = setInterval(() => {
 					// Make sure the connection is opened before sending the message..
-					if(this._isConnected()) {
+					if(this.isConnected()) {
 						this.ws.send('PING');
 					}
 					this.latency = new Date();
@@ -212,7 +212,7 @@ client.prototype.handleMessage = function handleMessage(message) {
 				for(let i = 0; i < joinChannels.length; i++) {
 					const channel = joinChannels[i];
 					joinQueue.add(() => {
-						if(this._isConnected()) {
+						if(this.isConnected()) {
 							this.join(channel).catch(err => this.log.error(err));
 						}
 					});
@@ -1169,7 +1169,7 @@ client.prototype._openConnection = function _openConnection() {
 // Called when the WebSocket connection's readyState changes to OPEN.
 // Indicates that the connection is ready to send and receive data..
 client.prototype._onOpen = function _onOpen() {
-	if(!this._isConnected()) {
+	if(!this.isConnected()) {
 		return;
 	}
 
@@ -1314,7 +1314,7 @@ client.prototype._sendCommand = function _sendCommand(delay, channel, command, f
 	// Race promise against delay..
 	return new Promise((resolve, reject) => {
 		// Make sure the socket is opened..
-		if(!this._isConnected()) {
+		if(!this.isConnected()) {
 			// Disconnected from server..
 			return reject('Not connected to server.');
 		}
@@ -1349,7 +1349,7 @@ client.prototype._sendMessage = function _sendMessage(delay, channel, message, f
 	// Promise a result..
 	return new Promise((resolve, reject) => {
 		// Make sure the socket is opened and not logged in as a justinfan user..
-		if(!this._isConnected()) {
+		if(!this.isConnected()) {
 			return reject('Not connected to server.');
 		}
 		else if(_.isJustinfan(this.getUsername())) {
@@ -1487,7 +1487,7 @@ client.prototype.readyState = function readyState() {
 	return [ 'CONNECTING', 'OPEN', 'CLOSING', 'CLOSED' ][this.ws.readyState];
 };
 // Determine if the client has a WebSocket and it's open..
-client.prototype._isConnected = function _isConnected() {
+client.prototype.isConnected = function isConnected() {
 	return this.ws !== null && this.ws.readyState === 1;
 };
 // Disconnect from server..
diff --git a/lib/commands.js b/lib/commands.js
index e3152379b24b204596f6c3e72c0b51880fa9988c..acd186f80485f69fa5ad3118ced52fba4ec3c3cf 100755
--- a/lib/commands.js
+++ b/lib/commands.js
@@ -160,7 +160,7 @@ module.exports = {
 			});
 		});
 	},
-	
+
 	// Delete a specific message on a channel
 	deletemessage(channel, messageUUID) {
 		channel = _.channel(channel);
@@ -336,8 +336,8 @@ module.exports = {
 	},
 
 	// Send a message on a channel..
-	say(channel, message) {
-		channel = _.channel(channel);
+	say(message) {
+  	channel = _.channel(this.channels[0]);
 
 		if((message.startsWith('.') && !message.startsWith('..')) || message.startsWith('/') || message.startsWith('\\')) {
 			// Check if the message is an action message..
@@ -361,6 +361,12 @@ module.exports = {
 		});
 	},
 
+	reply(parentMessageId, message) {
+  	channel = _.channel(this.channels[0]);
+  	const command = `@reply-parent-msg-id=${parentMessageId} PRIVMSG ${channel} :${message}`;
+		return this._sendCommand(this._getPromiseDelay(), null, command);
+	},
+
 	// Enable slow mode on a channel..
 	slow,
 
